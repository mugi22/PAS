/*
*Create by CodeGenerator
*controllerTemplate
*M U G I
*/

package co.id.pegadaian.pasg2.controller;

import java.math.BigDecimal;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.hibernate.Session;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import co.id.pegadaian.pasg2.util.AbstractListScreen;

import co.id.pegadaian.pasg2.db.HibernateUtil;
import co.id.pegadaian.pasg2.pojo.TblLookup;
import co.id.pegadaian.pasg2.pojo.TblMenu;
import co.id.pegadaian.pasg2.pojo.TblPriviledge;
import co.id.pegadaian.pasg2.pojo.TblUser;
import co.id.pegadaian.pasg2.pojo.TblGroup;//harap Sesuaikan
import co.id.pegadaian.pasg2.dao.TblGroupDAO;
import co.id.pegadaian.pasg2.dao.TblLookupDAO;
import co.id.pegadaian.pasg2.dao.TblMenuDAO;

import co.id.pegadaian.pasg2.util.AbstractListScreen;


@Controller
public class GroupController  extends AbstractListScreen{
	@RequestMapping(value="/group.htm",method=RequestMethod.GET)
	 public String doGet(java.util.Map<String,Object> model, HttpSession session, HttpServletRequest reg, HttpServletResponse res){ 
	 	return super.doGet(model, session, reg,res);
	}
	
	
	 @RequestMapping(value="/group.htm", method=RequestMethod.POST)
	 public String doPost(Map<String, Object> model,HttpSession session, HttpServletRequest reg, HttpServletResponse res) {
		 super.doPost(model, session,reg,res);
		return getView();		 
	 }
	 
	 @Override
	protected String getView() {
		// TODO Auto-generated method stub
		return "group";
	}
	
//	 ***************************** LIST  **************************************************************
	 @RequestMapping(value="/groupListAll.htm", method=RequestMethod.POST)
     public @ResponseBody String groupListAll(Map<String, Object> model,HttpSession session,HttpServletRequest reg) {
                    String GroupId ="0";
                    if(reg.getParameter("GroupId").length()>0){
                    GroupId = (reg.getParameter("GroupId"));
                    }
                    String Jabatan=reg.getParameter("Jabatan");
                    String GroupName=reg.getParameter("GroupName");		 
         String userId = reg.getParameter("userId");
         String ses = (String) session.getAttribute("session"+userId);
         TblUser user = (TblUser) session.getAttribute("user"+userId);
  
         model.put("session", ses);
         if(!cekValidSession(session,userId)){
        	 return "[]";
         }
         String result="";
         int row = Integer.parseInt(reg.getParameter("rows"));
         int loffset = (Integer.parseInt(reg.getParameter("page"))-1)*row;
         Gson gson = new GsonBuilder().setDateFormat("dd-MM-yyyy").create();
         SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
         Session sess = null;
         try {
        	long rowCount=0;
			sess = HibernateUtil.getSessionFactory().openSession();
			TblGroupDAO dao = new TblGroupDAO(sess);
			Map h = new HashMap<String, Object>();
			List<TblGroup> l = new ArrayList<TblGroup>();
				h = dao.getByPerPage(new BigDecimal(GroupId),Jabatan,GroupName,loffset, row);
			
            result = gson.toJson(h);
            System.out.println(result);
            
            /**  BILA ADA PERUBAHAN DATA JSON*/
            String x = changeJson(h, sess);
            sess.close();
        	result ="{"+'"'+"total"+'"'+":"+h.get("total")+","+'"'+"rows"+'"'+":["+x+']'+'}';
			
		} catch (Exception e) {
			if(sess != null && sess.isOpen()) sess.close();
			e.printStackTrace();
		}         
         return result;
     }

// *********************ADD***********************
 @RequestMapping(value="/groupAdd.htm", method=RequestMethod.POST)
     public @ResponseBody String userAdd(Map<String, Object> model,HttpSession session,HttpServletRequest reg) {
		String userId = reg.getParameter("userId");
         //String ses = (String) session.getAttribute("session"+userId);
         TblUser user = (TblUser) session.getAttribute("user"+userId);
         
         if(!cekValidSession(session,userId)){
        	 return "fail";
         }
         Session sess = null;
         String x ="";
         Map h = new HashMap<String, Object>();
         Gson gson = new Gson();
         SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
         try {
               sess = HibernateUtil.getSessionFactory().openSession();
               TblGroupDAO dao = new TblGroupDAO(sess);
               TblGroup tbl = new TblGroup();
                    tbl.setParams(reg.getParameter("params"));
                    tbl.setGroupId(new BigDecimal((reg.getParameter("groupId"))));
                    tbl.setJabatan(reg.getParameter("jabatan"));
                    tbl.setGroupName(reg.getParameter("groupName"));
                             
               tbl.setCreateBy(user.getUserId());
               tbl.setCreateDate(new Date());
               
               sess.beginTransaction();
               dao.insert(tbl);
             simpanLog(user.getUserId(),gson.toJson(tbl),"ADD",sess,tbl.getClass().getName());
               sess.getTransaction().commit();
               sess.close();
               x=gson.toJson("SUKSES");
         }catch(Exception e){
        	 if(sess != null && sess.isOpen()) sess.close();
             x=gson.toJson("fail");
             e.printStackTrace();
         }
         return x;
 	 }

//**************************************EDIT*************************************
//	 EDIT	 
	 @RequestMapping(value="/groupEdit.htm", method=RequestMethod.POST)
     public @ResponseBody String groupEdit(Map<String, Object> model,HttpSession session,HttpServletRequest reg) {
                    String GroupId="0";
                    if(reg.getParameter("groupId").length()>0){
                    GroupId = (reg.getParameter("groupId"));
                    }
		 
		String userId = reg.getParameter("userId");
         //String ses = (String) session.getAttribute("session"+userId);
         TblUser user = (TblUser) session.getAttribute("user"+userId);
         if(!cekValidSession(session,userId)){        	 
         	return "fail";
         }
         
         Session sess = null;
         String x ="";
         Map h = new HashMap<String, Object>();
         Gson gson = new Gson();
         SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
         try {
               sess = HibernateUtil.getSessionFactory().openSession();
               TblGroupDAO dao = new TblGroupDAO(sess);
               TblGroup tbl = dao.getById(new BigDecimal(GroupId));
                String tblOld = gson.toJson(tbl);
                    tbl.setParams(reg.getParameter("params"));
                    tbl.setGroupId(new BigDecimal((reg.getParameter("groupId"))));
                    tbl.setJabatan(reg.getParameter("jabatan"));
                    tbl.setGroupName(reg.getParameter("groupName"));
               
               tbl.setUpdateBy(user.getUserId());
               tbl.setUpdateDate(new Date());
               
               sess.beginTransaction();
               dao.update(tbl);
             simpanLog(user.getUserId(),gson.toJson(tbl)+"OLD "+gson.toJson(tblOld),"MODIFY",sess,tbl.getClass().getName());
               sess.getTransaction().commit();
               sess.close();
               x=gson.toJson("UPDATE SUKSES");
         }catch(Exception e){
        	 if(sess != null && sess.isOpen()) sess.close();
             x=gson.toJson("fail");
             e.printStackTrace();
         }
         return x;
 	 }
	 
//	***********************************DELETE**************************************** 
	 @RequestMapping(value="/groupDelete.htm", method=RequestMethod.POST)
     public @ResponseBody String groupDelete(Map<String, Object> model,HttpSession session,HttpServletRequest reg) {
                    String GroupId="0";
                    if(reg.getParameter("groupId").length()>0){
                    GroupId = (reg.getParameter("groupId"));
                    }
	
//		 String sId = reg.getParameter("param"); //param sesuaikan dengan yg di jsp
		 String userId = reg.getParameter("userId");
         //String ses = (String) session.getAttribute("session"+userId);
         TblUser user = (TblUser) session.getAttribute("user"+userId);
         //model.put("session", ses);
          if(!cekValidSession(session,userId)){
                	 return "fail";
         }
         Session sess = null;
         String x ="";
         Map h = new HashMap<String, Object>();
         Gson gson = new Gson();
         try {
               sess = HibernateUtil.getSessionFactory().openSession();
               TblGroupDAO dao = new TblGroupDAO(sess);
               TblGroup tbl = dao.getById(new BigDecimal(GroupId));
               String tblDel = gson.toJson(tbl);
               sess.beginTransaction();
               dao.delete(tbl);
             simpanLog(user.getUserId(),gson.toJson(tbl),"DELETE",sess,tbl.getClass().getName());     
               sess.getTransaction().commit();
               sess.close();
               h.put("success", true);
               x=gson.toJson(h);
         }catch(Exception e){
        	 if(sess != null && sess.isOpen()) sess.close();
        	 x=gson.toJson("fail");
             e.printStackTrace();
         }
         return x;
 	 }

//----------Tambakan Nama Group pada List------------------------------------------
	public String changeJson(Map<String,Object> result, Session sess){//nemabhakan field nama group dan nama menu
		List<TblGroup> listPri = (List<TblGroup>) result.get("rows");
		Gson gson = new GsonBuilder().setDateFormat("dd-MM-yyyy").create();
		StringBuffer sb = new StringBuffer();
		for(TblGroup pr : listPri){
			String s = gson.toJson(pr);	
			TblLookupDAO lookupDAO = new TblLookupDAO(sess);
			TblLookup lookup = lookupDAO.getById("JABATAN", pr.getJabatan());
//			TblGroupDAO groupDAO = new TblGroupDAO(sess);
//			TblGroup group = groupDAO.getById(pr.getGroupId());
//			TblMenuDAO menuDAO = new TblMenuDAO(sess);
//			TblMenu menu =  menuDAO.getById(pr.getMenuId());
			String a = s.replace("}", ","+'"'+"jabatanName"+'"'+":"+'"'+lookup.getLookupLabel()+'"'+","+'"'+"menuName"+'"'+":"+'"'+/*menu.getMenuName()+*/'"'+"},");
			sb.append(a);
		}
		String x="";
		if(sb.toString().length()>0){
			x= (sb.toString()).substring(0,sb.toString().length()-1);
		}	else{
			x="";
		}
		return x;
	}

//===============================REPORT====================================================

	@RequestMapping(value="/groupReport.htm",method=RequestMethod.GET)
	 public String doGetgroupReport(java.util.Map<String,Object> model, HttpSession session, HttpServletRequest reg, HttpServletResponse res){ 
	 	super.doGet(model, session, reg,res);
	 	return "/report/groupReport";
	}
	
	
		 @RequestMapping(value="/groupDataReport.htm", method=RequestMethod.GET)
     public @ResponseBody String groupDataReport(Map<String, Object> model,HttpSession session,HttpServletRequest reg) {
                    String GroupId ="0";
                    if(reg.getParameter("GroupId").length()>0){
                    GroupId = (reg.getParameter("GroupId"));
                    }
                    String Jabatan=reg.getParameter("Jabatan");
                    String GroupName=reg.getParameter("GroupName");		 
         String userId = reg.getParameter("userId");
         String ses = (String) session.getAttribute("session"+userId);
         TblUser user = (TblUser) session.getAttribute("user"+userId);
  
         model.put("session", ses);
         if(!cekValidSession(session,userId)){
        	 return "[]";
         }
         String result="";
          Gson gson = new GsonBuilder().setDateFormat("dd-MM-yyyy").create();
         SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
         Session sess = null;
         try {
        	long rowCount=0;
			sess = HibernateUtil.getSessionFactory().openSession();
			TblGroupDAO dao = new TblGroupDAO(sess);
			List<TblGroup> l = new ArrayList<TblGroup>();
				l = dao.getBy(new BigDecimal(GroupId),Jabatan,GroupName);
			sess.close();
            result = gson.toJson(l);
            System.out.println(result);
            
            /**  BILA ADA PERUBAHAN DATA JSON
            String x = changeJson(h, sess);
            sess.close();
        	result ="{"+'"'+"total"+'"'+":"+h.get("total")+","+'"'+"rows"+'"'+":["+x+']'+'}';
            */
		} catch (Exception e) {
			if(sess != null && sess.isOpen()) sess.close();
			e.printStackTrace();
		}         
         return result;
     }
	
	
	
	
	
}
